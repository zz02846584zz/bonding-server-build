import { CoolEventManager } from '@cool-midway/core';
import { Client } from '@elastic/elasticsearch';
import { WaitForActiveShards } from '@elastic/elasticsearch/lib/api/types';
import { ILogger } from '@midwayjs/logger';
import { EsConfig } from '.';
/**
 * Es索引基类
 */
export declare class BaseEsIndex {
    index: string;
    client: Client;
    coreLogger: ILogger;
    coolEventManager: CoolEventManager;
    /**
     * 设置索引
     * @param index
     */
    setIndex(index: string): void;
    /**
     * 处理es数据变更事件，主要用于同步数据
     * @param method
     * @param data
     */
    handleDataChange(index: any, method: any, data: any): Promise<void>;
    /**
     * 数据更新事件
     * @param method
     * @param data
     */
    esDataChange(method: any, data: any): Promise<void>;
    /**
     *
     * @param client
     */
    setClient(client: Client): void;
    /**
     * 查询
     * @param body
     */
    find(body?: any, size?: number): Promise<unknown[]>;
    /**
     * 分页查询
     * @param body
     * @param page
     * @param size
     */
    findPage(body?: any, page?: number, size?: number): Promise<{
        list: unknown[];
        pagination: {
            page: number;
            size: number;
            total: any;
        };
    }>;
    /**
     * 根据ID查询
     * @param id
     * @returns
     */
    findById(id: any): Promise<unknown>;
    /**
     * 根据多个ID查询
     * @param ids
     * @returns
     */
    findByIds(ids: string[]): Promise<any>;
    /**
     * 插入与更新
     * @param body
     * @param refresh
     * @param waitForActiveShards
     * @returns
     */
    upsert(body: any, refresh?: boolean | 'wait_for', waitForActiveShards?: WaitForActiveShards): Promise<import("@elastic/elasticsearch/lib/api/types").WriteResponseBase>;
    /**
     * 批量插入更新
     * @param bodys
     * @param type
     * @param refresh
     * @param waitForActiveShards
     * @returns
     */
    batchIndex(bodys: any[], type: 'index' | 'create' | 'delete' | 'update', refresh?: boolean | 'wait_for', waitForActiveShards?: WaitForActiveShards): Promise<import("@elastic/elasticsearch/lib/api/types").BulkResponse>;
    /**
     * 删除索引
     * @param id
     * @param refresh
     * @param waitForActiveShards
     * @returns
     */
    deleteById(id: any, refresh?: boolean | 'wait_for', waitForActiveShards?: WaitForActiveShards): Promise<import("@elastic/elasticsearch/lib/api/types").WriteResponseBase>;
    /**
     * 删除文档
     * @param ids
     * @param refresh
     * @param waitForActiveShards
     * @returns
     */
    deleteByIds(ids: string[], refresh?: boolean, waitForActiveShards?: WaitForActiveShards): Promise<import("@elastic/elasticsearch/lib/api/types").DeleteByQueryResponse>;
    /**
     * 根据条件批量删除
     * @param body
     * @param refresh
     * @param waitForActiveShards
     * @returns
     */
    deleteByQuery(body: any, refresh?: boolean, waitForActiveShards?: WaitForActiveShards): Promise<import("@elastic/elasticsearch/lib/api/types").DeleteByQueryResponse>;
    /**
     * 更新索引
     * @param body
     * @param refresh
     * @param waitForActiveShards
     * @returns
     */
    updateById(body: any, refresh?: boolean | 'wait_for', waitForActiveShards?: WaitForActiveShards): Promise<import("@elastic/elasticsearch/lib/api/types").UpdateResponse<unknown>>;
    /**
     * 根据条件更新
     * @param body
     * @param refresh
     * @param waitForActiveShards
     */
    updateByQuery(body: any, refresh?: boolean, waitForActiveShards?: WaitForActiveShards): Promise<import("@elastic/elasticsearch/lib/api/types").UpdateByQueryResponse>;
    /**
     * 查询条数
     * @param body
     */
    findCount(body?: any): Promise<any>;
    /**
     * 创建更新索引
     * @param config 配置
     */
    createIndex(properties: {}, config?: EsConfig): Promise<void>;
}
