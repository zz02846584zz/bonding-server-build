/// <reference types="node" />
import { MiddlewareParamArray } from '@midwayjs/decorator';
/**
 * 模块配置
 */
export interface ModuleConfig {
    name: string;
    description: string;
    middlewares?: MiddlewareParamArray;
    globalMiddlewares?: MiddlewareParamArray;
    order?: number;
}
export interface CoolConfig {
    initDB?: boolean;
    page?: {
        size: number;
    };
    es?: {
        nodes: string[];
    };
    pay?: {
        wx?: CoolWxPayConfig;
        ali?: CoolAliPayConfig;
    };
    rpc?: CoolRpcConfig;
    redis?: RedisConfig | RedisConfig[];
    file?: {
        mode: MODETYPE;
        domain?: string;
        oss?: OSSConfig;
        cos?: COSConfig;
        qiniu?: QINIUConfig;
    };
}
export interface CoolRpcConfig {
    name: string;
    redis: RedisConfig & RedisConfig[] & unknown;
}
export interface RedisConfig {
    host: string;
    password: string;
    port: number;
    db: number;
}
export declare enum MODETYPE {
    LOCAL = "local",
    CLOUD = "cloud",
    OTHER = "other"
}
export declare enum CLOUDTYPE {
    OSS = "oss",
    COS = "cos",
    QINIU = "qiniu"
}
/**
 * 上传模式
 */
export interface Mode {
    mode: MODETYPE;
    type: string;
}
/**
 * 模块配置
 */
export interface CoolFileConfig {
    mode: MODETYPE;
    oss: OSSConfig;
    cos: COSConfig;
    qiniu: QINIUConfig;
    domain: string;
}
/**
 * OSS 配置
 */
export interface OSSConfig {
    accessKeyId: string;
    accessKeySecret: string;
    bucket: string;
    endpoint: string;
    timeout: string;
}
/**
 * COS 配置
 */
export interface COSConfig {
    accessKeyId: string;
    accessKeySecret: string;
    bucket: string;
    region: string;
    publicDomain: string;
}
export interface QINIUConfig {
    accessKeyId: string;
    accessKeySecret: string;
    bucket: string;
    region: string;
    publicDomain: string;
}
/**
 * 微信支付配置
 */
export interface CoolWxPayConfig {
    appid: string;
    mchid: string;
    partnerKey: string;
    notify_url: string;
    pfx: Buffer;
}
/**
 * 支付宝支付配置
 */
export interface CoolAliPayConfig {
    appId: string;
    notifyUrl: string;
    sandbox: boolean;
    signType: 'RSA2' & string;
    rsaPublic: string;
    rsaPrivate: string;
}
