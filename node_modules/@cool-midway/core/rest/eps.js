"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CoolEps = void 0;
const decorator_1 = require("@midwayjs/decorator");
const orm_1 = require("@midwayjs/orm");
const typeorm_1 = require("typeorm");
const _ = require("lodash");
const core_1 = require("@midwayjs/core");
/**
 * 实体路径
 */
let CoolEps = class CoolEps {
    constructor() {
        this.admin = {};
        this.app = {};
    }
    // @Init()
    async init() {
        var _a;
        const entitys = await this.entity();
        const controllers = await this.controller();
        const routers = await this.router();
        const adminArr = [];
        const appArr = [];
        for (const controller of controllers) {
            const { prefix, module, curdOption } = controller;
            const name = (_a = curdOption === null || curdOption === void 0 ? void 0 : curdOption.entity) === null || _a === void 0 ? void 0 : _a.name;
            (_.startsWith(prefix, '/admin/') ? adminArr : appArr).push({
                module,
                api: routers[prefix],
                name,
                columns: entitys[name] || [],
                prefix,
            });
        }
        this.admin = _.groupBy(adminArr, 'module');
        this.app = _.groupBy(appArr, 'module');
    }
    /**
     * 所有controller
     * @returns
     */
    async controller() {
        const result = [];
        const controllers = decorator_1.listModule(decorator_1.CONTROLLER_KEY);
        for (const controller of controllers) {
            result.push(decorator_1.getClassMetadata(decorator_1.CONTROLLER_KEY, controller));
        }
        return result;
    }
    /**
     * 所有路由
     * @returns
     */
    async router() {
        const collector = new core_1.WebRouterCollector();
        return _.groupBy((await collector.getFlattenRouterTable()).map(item => {
            return {
                method: item.requestMethod,
                path: item.url,
                summary: item.summary,
                dts: {},
                tag: '',
                prefix: item.prefix,
            };
        }), 'prefix');
    }
    /**
     * 所有实体
     * @returns
     */
    async entity() {
        const result = {};
        const entitys = decorator_1.listModule(orm_1.ENTITY_MODEL_KEY);
        for (const entity of entitys) {
            const op = decorator_1.getClassMetadata(orm_1.ENTITY_MODEL_KEY, entity);
            const commColums = [];
            let columns = typeorm_1.getRepository(entity, op.connectionName != 'ALL' ? op.connectionName : 'default').metadata.columns;
            columns = _.filter(columns.map(e => {
                return {
                    propertyName: e.propertyName,
                    type: typeof e.type == 'string' ? e.type : e.type.name.toLowerCase(),
                    length: e.length,
                    comment: e.comment,
                    nullable: e.isNullable,
                };
            }), o => {
                if (['createTime', 'updateTime'].includes(o.propertyName)) {
                    commColums.push(o);
                }
                return o && !['createTime', 'updateTime'].includes(o.propertyName);
            }).concat(commColums);
            result[entity.name] = columns;
        }
        return result;
    }
};
CoolEps = __decorate([
    decorator_1.Provide(),
    decorator_1.Scope(decorator_1.ScopeEnum.Singleton)
], CoolEps);
exports.CoolEps = CoolEps;
//# sourceMappingURL=eps.js.map