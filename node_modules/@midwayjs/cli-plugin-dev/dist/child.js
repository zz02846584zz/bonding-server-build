"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_core_1 = require("@midwayjs/command-core");
const utils_1 = require("./utils");
const options = JSON.parse(process.argv[2]);
let app;
let bootstrapStarter;
const exit = process.exit;
let isCloseApp = false;
let closeFun = () => { };
const closeApp = async () => {
    if (isCloseApp) {
        return;
    }
    isCloseApp = true;
    if (bootstrapStarter) {
        await bootstrapStarter.close();
    }
    else {
        await closeFun(app);
    }
};
process.exit = async () => {
    await closeApp();
    exit();
};
(async () => {
    if (process.env.MIDWAY_DEV_IS_DEBUG) {
        await (0, utils_1.waitDebug)(process.env.MIDWAY_DEV_IS_DEBUG);
    }
    const modPath = (0, command_core_1.findNpmModule)(process.cwd(), '@midwayjs/mock');
    if (!modPath) {
        throw new Error('Please add @midwayjs/mock to your devDependencies');
    }
    const { createApp, close, createFunctionApp, createBootstrap, } = require(modPath);
    closeFun = close;
    let startSuccess = false;
    try {
        if (options.entryFile) {
            bootstrapStarter = await createBootstrap(options.entryFile);
        }
        else if (process.env.MIDWAY_DEV_IS_SERVERLESS === 'true') {
            app = await createFunctionApp(process.cwd(), options);
        }
        else {
            app = await createApp(process.cwd(), options, options.framework);
        }
        startSuccess = true;
    }
    catch (e) {
        console.log('');
        process.send({
            type: 'error',
            message: 'start error: ' + ((e && e.message) || ''),
        });
        console.log(e);
    }
    if (!process.env.MIDWAY_DEV_IS_SERVERLESS) {
        process.on('message', async (msg) => {
            if (!msg) {
                return;
            }
            if (msg.type === 'functions') {
                const data = await (0, utils_1.analysisDecorator)(options.baseDir || process.cwd());
                process.send({ type: 'dev:' + msg.type, data, id: msg.id });
            }
            else if (msg.type === 'exit') {
                await closeApp();
                process.send({ type: 'dev:' + msg.type, id: msg.id });
                process.exit();
            }
        });
    }
    process.send({
        type: 'started',
        startSuccess,
        port: process.env.MIDWAY_HTTP_PORT,
    });
})();
//# sourceMappingURL=child.js.map