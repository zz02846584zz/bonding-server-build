export declare type MiddlewareParamArray = Array<string | any>;
export declare type ObjectIdentifier = string | Symbol;
export declare type GroupModeType = 'one' | 'multi';
export declare enum ScopeEnum {
    Singleton = "Singleton",
    Request = "Request",
    Prototype = "Prototype"
}
export declare enum InjectModeEnum {
    Identifier = "Identifier",
    Class = "Class",
    PropertyName = "PropertyName"
}
/**
 * 内部管理的属性、json、ref等解析实例存储
 */
export interface IManagedInstance {
    type: string;
    value?: any;
    args?: any;
}
export interface ObjectDefinitionOptions {
    isAsync?: boolean;
    initMethod?: string;
    destroyMethod?: string;
    scope?: ScopeEnum;
    constructorArgs?: any[];
    namespace?: string;
    srcPath?: string;
    allowDowngrade?: boolean;
}
export interface TagPropsMetadata {
    key: string | number | symbol;
    value: any;
    args?: any;
}
export interface TagClsMetadata {
    id: string;
    originName: string;
    uuid: string;
    name: string;
}
export interface ReflectResult {
    [key: string]: any[];
}
export declare enum MSProviderType {
    DUBBO = "dubbo",
    GRPC = "gRPC",
    HSF = "hsf"
}
export declare enum MSListenerType {
    RABBITMQ = "rabbitmq",
    MQTT = "mqtt",
    KAFKA = "kafka",
    REDIS = "redis"
}
export declare namespace ConsumerMetadata {
    interface ConsumerMetadata {
        type: MSListenerType;
        metadata: any;
    }
}
/**
 * grpc decorator metadata format
 */
export declare namespace GRPCMetadata {
    interface ProviderOptions {
        serviceName?: string;
        package?: string;
    }
    interface ProviderMetadata {
        type: MSProviderType;
        metadata: ProviderOptions;
    }
}
export declare namespace FaaSMetadata {
    export interface ServerlessFunctionOptions {
        /**
         * function name
         */
        functionName?: string;
        /**
         * function description
         */
        description?: string;
        /**
         * function memory size, unit: M
         */
        memorySize?: number;
        /**
         * function timeout value, unit: seconds
         */
        timeout?: number;
        /**
         * function init timeout, just for aliyun
         */
        initTimeout?: number;
        /**
         * function runtime, nodejs10, nodejs12, nodejs14
         */
        runtime?: string;
        /**
         * invoke concurrency, just for aliyun
         */
        concurrency?: number;
        /**
         * function invoke stage, like env, just for tencent
         */
        stage?: string;
        /**
         * environment variable, key-value
         */
        environment?: any;
        /**
         * deploy or not
         */
        isDeploy?: boolean;
    }
    interface TriggerCommonOptions {
        /**
         * function name
         */
        functionName?: string;
        /**
         * serverless event name
         */
        name?: string;
        /**
         * function invoke role, just for aliyun
         */
        role?: string;
        /**
         * function publish version, just for aliyun
         */
        version?: string;
        /**
         * deploy or not
         */
        isDeploy?: boolean;
        /**
         * function middleware
         */
        middleware?: any[];
    }
    export interface EventTriggerOptions extends TriggerCommonOptions {
    }
    export interface HTTPTriggerOptions extends TriggerCommonOptions {
        path: string;
        method?: 'get' | 'post' | 'delete' | 'put' | 'head' | 'patch' | 'all';
    }
    export interface APIGatewayTriggerOptions extends HTTPTriggerOptions {
    }
    export interface OSTriggerOptions extends TriggerCommonOptions {
        bucket: string;
        events: string | string[];
        filter?: {
            prefix: string;
            suffix: string;
        };
    }
    export interface LogTriggerOptions extends TriggerCommonOptions {
        source: string;
        project: string;
        log: string;
        retryTime?: number;
        interval?: number;
    }
    export interface TimerTriggerOptions extends TriggerCommonOptions {
        type: 'cron' | 'every' | 'interval';
        value: string;
        payload?: string;
        enable?: boolean;
    }
    export interface MQTriggerOptions extends TriggerCommonOptions {
        topic: string;
        tags?: string;
        region?: string;
        strategy?: 'BACKOFF_RETRY' | 'EXPONENTIAL_DECAY_RETRY';
    }
    export interface HSFTriggerOptions extends TriggerCommonOptions {
    }
    export interface MTopTriggerOptions extends TriggerCommonOptions {
    }
    export interface CDNTriggerOptions extends TriggerCommonOptions {
    }
    export type EventTriggerUnionOptions = EventTriggerOptions | HTTPTriggerOptions | APIGatewayTriggerOptions | OSTriggerOptions | CDNTriggerOptions | LogTriggerOptions | TimerTriggerOptions | MQTriggerOptions | HSFTriggerOptions | MTopTriggerOptions;
    export interface TriggerMetadata {
        type: ServerlessTriggerType;
        functionName?: string;
        methodName: string;
        metadata: EventTriggerUnionOptions;
    }
    export {};
}
export declare abstract class FrameworkType {
    abstract name: string;
}
export declare class MidwayFrameworkType extends FrameworkType {
    name: string;
    static WEB: MidwayFrameworkType;
    static WEB_KOA: MidwayFrameworkType;
    static WEB_EXPRESS: MidwayFrameworkType;
    static FAAS: MidwayFrameworkType;
    static MS_GRPC: MidwayFrameworkType;
    static MS_RABBITMQ: MidwayFrameworkType;
    static WS_IO: MidwayFrameworkType;
    static WS: MidwayFrameworkType;
    static SERVERLESS_APP: MidwayFrameworkType;
    static CUSTOM: MidwayFrameworkType;
    static EMPTY: MidwayFrameworkType;
    static LIGHT: MidwayFrameworkType;
    static TASK: MidwayFrameworkType;
    constructor(name: string);
}
export declare enum ServerlessTriggerType {
    EVENT = "event",
    HTTP = "http",
    API_GATEWAY = "apigw",
    OS = "os",
    CDN = "cdn",
    LOG = "log",
    TIMER = "timer",
    MQ = "mq",
    HSF = "hsf",
    MTOP = "mtop"
}
export interface IModuleStore {
    listModule(key: string): any;
    saveModule(key: string, module: any): any;
    transformModule?(moduleMap: Map<string, Set<any>>): any;
}
//# sourceMappingURL=interface.d.ts.map