export interface JoinPoint {
    methodName: string;
    target: any;
    args: any[];
    proceed?(...args: any[]): any;
}
export interface AspectMetadata {
    aspectTarget: any;
    match?: string | (() => boolean);
    priority?: number;
}
export interface IMethodAspect {
    after?(joinPoint: JoinPoint, result: any, error: Error): any;
    afterReturn?(joinPoint: JoinPoint, result: any): any;
    afterThrow?(joinPoint: JoinPoint, error: Error): void;
    before?(joinPoint: JoinPoint): void;
    around?(joinPoint: JoinPoint): any;
}
export declare function Aspect(aspectTarget: any | any[], match?: string | (() => boolean), priority?: number): (target: any) => void;
//# sourceMappingURL=aspect.d.ts.map