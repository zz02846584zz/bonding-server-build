"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formetAggregationHandlers = exports.writeWrapper = void 0;
const path_1 = require("path");
const fs_1 = require("fs");
const ejs_1 = require("ejs");
const utils_1 = require("./utils");
// 写入口
function writeWrapper(options) {
    var _a, _b, _c;
    const { service, distDir, starter, baseDir, cover, faasModName = '@midwayjs/faas', initializeName, advancePreventMultiInit, loadDirectory = [], preloadModules = [], faasStarterName, middleware, clearCache = true, templatePath, moreArgs, isDefaultFunc = false, skipInitializer = false, preloadFile, entryAppDir, entryBaseDir, moreTemplateVariables = {}, aggregationBeforeExecScript = '', } = options;
    const files = {};
    // for function programing，function
    let functionMap;
    const functions = service.functions || {};
    for (const func in functions) {
        const handlerConf = functions[func];
        // for fp
        functionMap = assignToFunctionMap(functionMap, handlerConf);
        // for aggregation fp
        if (handlerConf._handlers) {
            handlerConf._handlers.forEach(innerHandlerConf => {
                functionMap = assignToFunctionMap(functionMap, innerHandlerConf);
            });
        }
        const handlerSplitInfo = handlerConf.handler.split('.');
        let handlerFileName = handlerSplitInfo[0];
        const name = handlerSplitInfo[1];
        if (isDefaultFunc) {
            handlerFileName = func;
        }
        if (!cover && (0, fs_1.existsSync)((0, path_1.join)(baseDir, handlerFileName + '.js'))) {
            // 如果入口文件名存在，则跳过
            continue;
        }
        if (!files[handlerFileName]) {
            files[handlerFileName] = {
                handlers: [],
                originLayers: [],
            };
        }
        if (isDefaultFunc) {
            files[handlerFileName].defaultFunctionHandlerName = name;
        }
        if (handlerConf.layers && handlerConf.layers.length) {
            files[handlerFileName].originLayers.push(handlerConf.layers);
        }
        // 高密度部署
        if (handlerConf._isAggregation) {
            files[handlerFileName].handlers.push({
                name,
                handlers: formetAggregationHandlers(handlerConf._handlers),
            });
        }
        else {
            files[handlerFileName].handlers.push({
                name,
                handler: handlerConf.handler,
            });
        }
    }
    const isCustomAppType = !!(service === null || service === void 0 ? void 0 : service.deployType);
    let faasPkgFile;
    const cwd = process.cwd();
    try {
        const modName = '@midwayjs/faas';
        faasPkgFile = require.resolve(modName + '/package.json', {
            paths: [distDir, baseDir],
        });
    }
    catch (_d) {
        //
    }
    process.chdir(cwd);
    let faasVersion = 1;
    if (faasPkgFile && (0, fs_1.existsSync)(faasPkgFile)) {
        const { version } = JSON.parse((0, fs_1.readFileSync)(faasPkgFile).toString());
        if (version[0]) {
            faasVersion = +version[0];
        }
    }
    let entryWrapper = '../wrapper_v1.ejs';
    if (isCustomAppType) {
        entryWrapper = '../wrapper_app.ejs';
    }
    else {
        if (faasVersion === 2) {
            entryWrapper = '../wrapper_v2.ejs';
        }
        else if (faasVersion === 3) {
            entryWrapper = '../wrapper_v3.ejs';
        }
    }
    const tpl = (0, fs_1.readFileSync)(templatePath ? templatePath : (0, path_1.resolve)(__dirname, entryWrapper)).toString();
    if ((_a = functionMap === null || functionMap === void 0 ? void 0 : functionMap.functionList) === null || _a === void 0 ? void 0 : _a.length) {
        const target = (0, path_1.join)(distDir, 'registerFunction.js');
        const source = (0, fs_1.readFileSync)((0, path_1.join)(__dirname, '../hooks_runtime.ejs'), 'utf-8');
        const runtime = (0, ejs_1.render)(source, {
            runtime: (_c = (_b = service === null || service === void 0 ? void 0 : service.hooks) === null || _b === void 0 ? void 0 : _b.runtime) !== null && _c !== void 0 ? _c : 'compiler',
        });
        if (!(0, fs_1.existsSync)(target)) {
            (0, fs_1.writeFileSync)(target, runtime, { encoding: 'utf-8' });
        }
    }
    for (const file in files) {
        const fileName = (0, path_1.join)(distDir, `${file}.js`);
        const layers = (0, utils_1.getLayers)(service.layers, ...files[file].originLayers);
        const content = (0, ejs_1.render)(tpl, {
            starter,
            runtimeConfig: service,
            faasModName: faasModName || '@midwayjs/faas',
            loadDirectory,
            // Todo: future need remove middleware, use egg
            middleware: middleware || [],
            faasStarterName: faasStarterName || 'FaaSStarter',
            advancePreventMultiInit: advancePreventMultiInit || false,
            initializer: initializeName || 'initializer',
            handlers: files[file].handlers,
            functionMap,
            preloadModules,
            clearCache,
            moreArgs: moreArgs || false,
            isDefaultFunc,
            skipInitializer,
            entryAppDir,
            entryBaseDir,
            defaultFunctionHandlerName: files[file].defaultFunctionHandlerName,
            preloadFile,
            aggregationBeforeExecScript,
            ...layers,
            ...moreTemplateVariables,
        });
        if ((0, fs_1.existsSync)(fileName)) {
            const oldContent = (0, fs_1.readFileSync)(fileName).toString();
            if (oldContent === content) {
                continue;
            }
        }
        (0, fs_1.writeFileSync)(fileName, content);
    }
}
exports.writeWrapper = writeWrapper;
const assignToFunctionMap = (functionMap, handlerConf) => {
    if (handlerConf.isFunctional) {
        if (!(functionMap === null || functionMap === void 0 ? void 0 : functionMap.functionList)) {
            functionMap = { functionList: [] };
        }
        functionMap.functionList.push({
            functionName: handlerConf.exportFunction,
            functionHandler: handlerConf.handler,
            functionFilePath: handlerConf.sourceFilePath,
            argsPath: handlerConf.argsPath,
        });
    }
    return functionMap;
};
function formetAggregationHandlers(handlers) {
    if (!handlers || !handlers.length) {
        return [];
    }
    return handlers
        .map(handler => {
        const { path = '', eventType } = handler;
        if (eventType !== 'http') {
            return {
                ...handler,
                level: -1,
            };
        }
        return {
            ...handler,
            method: (handler.method ? [].concat(handler.method) : []).map(method => {
                return method.toLowerCase();
            }),
            handler: handler.handler,
            router: path.replace(/\*/g, '**'),
            pureRouter: path.replace(/\**$/, ''),
            regRouter: path.replace(/\/\*$/, '/(.*)?') || '/(.*)?',
            level: path.split('/').length - 1,
            paramsMatchLevel: path.indexOf('/:') !== -1 ? 1 : 0,
        };
    })
        .sort((handlerA, handlerB) => {
        if (handlerA.level === handlerB.level) {
            if (handlerA.level < 0) {
                return -1;
            }
            if (handlerB.pureRouter === handlerA.pureRouter) {
                return handlerA.router.length - handlerB.router.length;
            }
            if (handlerA.paramsMatchLevel === handlerB.paramsMatchLevel) {
                return handlerB.pureRouter.length - handlerA.pureRouter.length;
            }
            return handlerA.paramsMatchLevel - handlerB.paramsMatchLevel;
        }
        return handlerB.level - handlerA.level;
    });
}
exports.formetAggregationHandlers = formetAggregationHandlers;
//# sourceMappingURL=wrapper.js.map