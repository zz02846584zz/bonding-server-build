/// <reference types="socket.io-client" />
/// <reference types="node" />
export interface MidwaySocketIOClientOptions extends Partial<SocketIOClient.ConnectOpts> {
    url?: string;
    protocol?: string;
    host?: string;
    namespace?: string;
    port?: any;
}
export declare class SocketIOWrapperClient {
    private readonly socket;
    constructor(socket: any);
    connect(): Promise<unknown>;
    getSocket(): SocketIOClient.Socket;
    send(eventName: string, ...args: any[]): void;
    on(eventName: string, handler: any): void;
    once(eventName: string, handler: any): SocketIOClient.Emitter;
    removeListener(event: string, fn?: any): SocketIOClient.Emitter;
    emit(eventName: string, ...args: any[]): SocketIOClient.Socket;
    sendWithAck(eventName: string, ...args: any[]): Promise<unknown>;
    close(): void;
}
export declare function createSocketIOClient(opts: MidwaySocketIOClientOptions): Promise<SocketIOWrapperClient & NodeJS.EventEmitter>;
//# sourceMappingURL=socketio.d.ts.map