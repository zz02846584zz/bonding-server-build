"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformFrameworkToConfiguration = exports.findFirstExistModule = exports.isWin32 = exports.isTestEnvironment = void 0;
const core_1 = require("@midwayjs/core");
const decorator_1 = require("@midwayjs/decorator");
const os = require("os");
const assert = require("assert");
function isTestEnvironment() {
    const testEnv = ['test', 'unittest'];
    return (testEnv.includes(process.env.MIDWAY_SERVER_ENV) ||
        testEnv.includes(process.env.EGG_SERVER_ENV) ||
        testEnv.includes(process.env.NODE_ENV));
}
exports.isTestEnvironment = isTestEnvironment;
function isWin32() {
    return os.platform() === 'win32';
}
exports.isWin32 = isWin32;
function findFirstExistModule(moduleList) {
    for (const name of moduleList) {
        if (!name)
            continue;
        try {
            return require(name);
        }
        catch (e) {
            // ignore
        }
    }
}
exports.findFirstExistModule = findFirstExistModule;
/**
 * transform a framework component or framework module to configuration class
 * @param Framework
 */
function transformFrameworkToConfiguration(Framework) {
    if (!Framework)
        return null;
    let CustomFramework = Framework;
    if (typeof Framework === 'string') {
        Framework = (0, core_1.safeRequire)(Framework);
    }
    if (Framework.Configuration) {
        return Framework;
    }
    if (Framework.Framework) {
        CustomFramework = Framework.Framework;
    }
    else {
        CustomFramework = Framework;
    }
    assert(CustomFramework, `can't found custom framework ${Framework}`);
    let CustomConfiguration = class CustomConfiguration {
        async onServerReady(container) {
            const customFramework = (await container.getAsync(CustomFramework));
            await customFramework.run();
        }
    };
    CustomConfiguration = __decorate([
        (0, decorator_1.Configuration)()
    ], CustomConfiguration);
    return {
        Configuration: CustomConfiguration,
        Framework,
    };
}
exports.transformFrameworkToConfiguration = transformFrameworkToConfiguration;
//# sourceMappingURL=utils.js.map