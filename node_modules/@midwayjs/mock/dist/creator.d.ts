import { IMidwayApplication, IMidwayFramework } from '@midwayjs/core';
import { ComponentModule, MockAppConfigurationOptions } from './interface';
export declare function create<T extends IMidwayFramework<any, any, any, any, any>>(appDir?: string, options?: MockAppConfigurationOptions, customFramework?: {
    new (...args: any[]): T;
} | ComponentModule): Promise<T>;
export declare function createApp<T extends IMidwayFramework<any, any, any, any, any>>(baseDir?: string, options?: MockAppConfigurationOptions, customFramework?: {
    new (...args: any[]): T;
} | ComponentModule): Promise<ReturnType<T['getApplication']>>;
export declare function close<T extends IMidwayApplication<any>>(app: T, options?: {
    cleanLogsDir?: boolean;
    cleanTempDir?: boolean;
    sleep?: number;
}): Promise<void>;
export declare function createFunctionApp<T extends IMidwayFramework<any, any, any, any, any>, Y = ReturnType<T['getApplication']>>(baseDir?: string, options?: MockAppConfigurationOptions, customFrameworkModule?: {
    new (...args: any[]): T;
} | ComponentModule): Promise<Y>;
/**
 * Create a real project but not ready or a virtual project
 * @param baseDir
 * @param options
 */
export declare function createLightApp(baseDir?: string, options?: MockAppConfigurationOptions): Promise<IMidwayApplication>;
//# sourceMappingURL=creator.d.ts.map