import { EntityOptions as BaseEntityOptions } from 'typeorm/decorator/options/EntityOptions';
import { ViewEntityOptions as BaseViewEntityOptions } from 'typeorm/decorator/options/ViewEntityOptions';
export declare const ENTITY_MODEL_KEY = "entity_model_key";
export declare const EVENT_SUBSCRIBER_KEY = "event_subscriber_key";
export declare const ORM_MODEL_KEY = "__orm_model_key__";
export interface EntityOptions extends BaseEntityOptions {
    connectionName?: string;
}
export interface ViewEntityOptions extends BaseViewEntityOptions {
    connectionName?: string;
}
/**
 * Entity - typeorm
 * @param options EntityOptions
 */
export declare function EntityModel(options?: EntityOptions): ClassDecorator;
/**
 * Entity - typeorm
 * @param name string
 * @param options EntityOptions & connectionName
 */
export declare function EntityModel(name?: string, options?: EntityOptions): ClassDecorator;
/**
 * ViewEntity - typeorm
 * @param options ViewEntityOptions
 */
export declare function EntityView(options?: ViewEntityOptions): ClassDecorator;
/**
 * Entity - ViewEntity
 * @param name string
 * @param options ViewEntityOptions
 */
export declare function EntityView(name?: string, options?: ViewEntityOptions): ClassDecorator;
export declare function InjectEntityModel(modelKey?: any, connectionName?: string): PropertyDecorator;
/**
 * EventSubscriber - typeorm
 * implements EntitySubscriberInterface
 */
export declare function EventSubscriberModel(options?: {
    connectionName?: string;
}): ClassDecorator;
//# sourceMappingURL=decorator.d.ts.map