"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSubscriberModel = exports.InjectEntityModel = exports.EntityView = exports.EntityModel = exports.ORM_MODEL_KEY = exports.EVENT_SUBSCRIBER_KEY = exports.ENTITY_MODEL_KEY = void 0;
const decorator_1 = require("@midwayjs/decorator");
const typeorm_1 = require("typeorm");
exports.ENTITY_MODEL_KEY = 'entity_model_key';
exports.EVENT_SUBSCRIBER_KEY = 'event_subscriber_key';
exports.ORM_MODEL_KEY = '__orm_model_key__';
/**
 * Entity - typeorm
 * @param nameOrOptions string|EntityOptions
 * @param maybeOptions EntityOptions
 */
function EntityModel(nameOrOptions, maybeOptions) {
    const options = (typeof nameOrOptions === 'object'
        ? nameOrOptions
        : maybeOptions) || {};
    const name = typeof nameOrOptions === 'string' ? nameOrOptions : options.name;
    const connectionName = (options === null || options === void 0 ? void 0 : options.connectionName) || 'ALL';
    return function (target) {
        if (typeof target === 'function') {
            (0, decorator_1.saveModule)(exports.ENTITY_MODEL_KEY, target);
            (0, decorator_1.saveClassMetadata)(exports.ENTITY_MODEL_KEY, { connectionName }, target);
        }
        else {
            (0, decorator_1.saveModule)(exports.ENTITY_MODEL_KEY, target.constructor);
            (0, decorator_1.saveClassMetadata)(exports.ENTITY_MODEL_KEY, { connectionName }, target.constructor);
        }
        (0, typeorm_1.getMetadataArgsStorage)().tables.push({
            target: target,
            name: name,
            type: 'regular',
            orderBy: options.orderBy ? options.orderBy : undefined,
            engine: options.engine ? options.engine : undefined,
            database: options.database ? options.database : undefined,
            schema: options.schema ? options.schema : undefined,
            synchronize: options.synchronize,
            withoutRowid: options.withoutRowid,
        });
    };
}
exports.EntityModel = EntityModel;
/**
 * Entity - typeorm
 * @param nameOrOptions string|ViewEntityOptions
 * @param maybeOptions ViewEntityOptions
 */
function EntityView(nameOrOptions, maybeOptions) {
    const options = (typeof nameOrOptions === 'object'
        ? nameOrOptions
        : maybeOptions) || {};
    const name = typeof nameOrOptions === 'string' ? nameOrOptions : options.name;
    const connectionName = (options === null || options === void 0 ? void 0 : options.connectionName) || 'ALL';
    return function (target) {
        if (typeof target === 'function') {
            (0, decorator_1.saveModule)(exports.ENTITY_MODEL_KEY, target);
            (0, decorator_1.saveClassMetadata)(exports.ENTITY_MODEL_KEY, { connectionName }, target);
        }
        else {
            (0, decorator_1.saveModule)(exports.ENTITY_MODEL_KEY, target.constructor);
            (0, decorator_1.saveClassMetadata)(exports.ENTITY_MODEL_KEY, { connectionName }, target.constructor);
        }
        (0, typeorm_1.getMetadataArgsStorage)().tables.push({
            target: target,
            name: name,
            type: 'view',
            database: options.database ? options.database : undefined,
            schema: options.schema ? options.schema : undefined,
            expression: options.expression ? options.expression : undefined,
            materialized: options.materialized ? options.materialized : undefined,
            synchronize: options.synchronize,
        });
    };
}
exports.EntityView = EntityView;
function InjectEntityModel(modelKey, connectionName = 'default') {
    return (0, decorator_1.createCustomPropertyDecorator)(exports.ORM_MODEL_KEY, {
        modelKey,
        connectionName,
    });
}
exports.InjectEntityModel = InjectEntityModel;
/**
 * EventSubscriber - typeorm
 * implements EntitySubscriberInterface
 */
function EventSubscriberModel(options = {}) {
    return function (target) {
        (0, decorator_1.saveModule)(exports.EVENT_SUBSCRIBER_KEY, target);
        (0, decorator_1.saveClassMetadata)(exports.EVENT_SUBSCRIBER_KEY, options, target);
    };
}
exports.EventSubscriberModel = EventSubscriberModel;
//# sourceMappingURL=decorator.js.map