import { IMidwayBootstrapOptions, IMidwayContainer } from '@midwayjs/core';
export declare function isTypeScriptEnvironment(): boolean;
export declare class BootstrapStarter {
    protected appDir: string;
    protected baseDir: string;
    protected globalOptions: Partial<IMidwayBootstrapOptions>;
    protected globalConfig: any;
    private applicationContext;
    configure(options: IMidwayBootstrapOptions): this;
    init(): Promise<IMidwayContainer>;
    run(): Promise<void>;
    stop(): Promise<void>;
    protected getBaseDir(): string;
}
export declare class Bootstrap {
    private static starter;
    private static logger;
    private static configured;
    private static applicationContext;
    /**
     * set global configuration for midway
     * @param configuration
     */
    static configure(configuration?: IMidwayBootstrapOptions): typeof Bootstrap;
    private static getStarter;
    static run(): Promise<void>;
    static stop(): Promise<void>;
    static reset(): void;
    /**
     * on bootstrap receive a exit signal
     * @param signal
     */
    private static onSignal;
    /**
     * on bootstrap process exit
     * @param code
     */
    private static onExit;
    private static uncaughtExceptionHandler;
    private static unhandledRejectionHandler;
    static getApplicationContext(): IMidwayContainer;
}
//# sourceMappingURL=bootstrap.d.ts.map