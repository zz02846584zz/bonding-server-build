import { MidwayError } from './base';
import { ObjectIdentifier } from '@midwayjs/decorator';
export declare const FrameworkErrorEnum: {
    readonly UNKNOWN: "MIDWAY_10000";
    readonly COMMON: "MIDWAY_10001";
    readonly PARAM_TYPE: "MIDWAY_10002";
    readonly DEFINITION_NOT_FOUND: "MIDWAY_10003";
    readonly FEATURE_NO_LONGER_SUPPORTED: "MIDWAY_10004";
    readonly FEATURE_NOT_IMPLEMENTED: "MIDWAY_10004";
    readonly MISSING_CONFIG: "MIDWAY_10006";
    readonly MISSING_RESOLVER: "MIDWAY_10007";
    readonly DUPLICATE_ROUTER: "MIDWAY_10008";
    readonly USE_WRONG_METHOD: "MIDWAY_10009";
    readonly SINGLETON_INJECT_REQUEST: "MIDWAY_10010";
    readonly MISSING_IMPORTS: "MIDWAY_10011";
    readonly UTIL_HTTP_TIMEOUT: "MIDWAY_10012";
    readonly INCONSISTENT_VERSION: "MIDWAY_10013";
    readonly INVALID_CONFIG: "MIDWAY_10014";
};
export declare class MidwayCommonError extends MidwayError {
    constructor(message: string);
}
export declare class MidwayParameterError extends MidwayError {
    constructor(message?: string);
}
export declare class MidwayDefinitionNotFoundError extends MidwayError {
    static readonly type: unique symbol;
    static isClosePrototypeOf(ins: MidwayDefinitionNotFoundError): boolean;
    constructor(identifier: ObjectIdentifier);
    updateErrorMsg(className: string): void;
}
export declare class MidwayFeatureNoLongerSupportedError extends MidwayError {
    constructor(message?: string);
}
export declare class MidwayFeatureNotImplementedError extends MidwayError {
    constructor(message?: string);
}
export declare class MidwayConfigMissingError extends MidwayError {
    constructor(configKey: string);
}
export declare class MidwayInvalidConfigError extends MidwayError {
    constructor(message?: string);
}
export declare class MidwayResolverMissingError extends MidwayError {
    constructor(type: string);
}
export declare class MidwayDuplicateRouteError extends MidwayError {
    constructor(routerUrl: string, existPos: string, existPosOther: string);
}
export declare class MidwayUseWrongMethodError extends MidwayError {
    constructor(wrongMethod: string, replacedMethod: string, describeKey?: string);
}
export declare class MidwaySingletonInjectRequestError extends MidwayError {
    constructor(singletonScopeName: string, requestScopeName: string);
}
export declare class MidwayMissingImportComponentError extends MidwayError {
    constructor(originName: string);
}
export declare class MidwayUtilHttpClientTimeoutError extends MidwayError {
    constructor(message: string);
}
export declare class MidwayInconsistentVersionError extends MidwayError {
    constructor();
}
//# sourceMappingURL=framework.d.ts.map