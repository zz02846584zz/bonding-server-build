"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceFactory = void 0;
const assert = require("assert");
/**
 * 多客户端工厂实现
 */
class ServiceFactory {
    constructor() {
        this.clients = new Map();
        this.options = {};
    }
    async initClients(options = {}) {
        this.options = options;
        assert(!(options.client && options.clients), `midway:${this.getName()} can not set options.client and options.clients both`);
        // alias app[name] as client, but still support createInstance method
        if (options.client) {
            await this.createInstance(options.client, 'default');
            return;
        }
        // multi client, use app[name].getInstance(id)
        if (options.clients) {
            for (const id of Object.keys(options.clients)) {
                await this.createInstance(options.clients[id], id);
            }
        }
    }
    get(id = 'default') {
        return this.clients.get(id);
    }
    has(id) {
        return this.clients.has(id);
    }
    async createInstance(config, clientName) {
        // options.default will be merge in to options.clients[id]
        config = Object.assign({}, this.options['default'], config);
        const client = await this.createClient(config, clientName);
        if (client) {
            if (clientName) {
                this.clients.set(clientName, client);
            }
            return client;
        }
    }
    async destroyClient(client) { }
    async stop() {
        for (const value of this.clients.values()) {
            await this.destroyClient(value);
        }
    }
}
exports.ServiceFactory = ServiceFactory;
//# sourceMappingURL=serviceFactory.js.map