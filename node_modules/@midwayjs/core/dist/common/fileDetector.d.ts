import { IFileDetector, IMidwayContainer } from '../interface';
export declare abstract class AbstractFileDetector<T> implements IFileDetector {
    options: T;
    extraDetectorOptions: T;
    constructor(options: any);
    abstract run(container: IMidwayContainer): any;
    setExtraDetectorOptions(detectorOptions: T): void;
}
export declare class DirectoryFileDetector extends AbstractFileDetector<{
    loadDir: string | string[];
    pattern: string | string[];
    ignore: string | string[];
    namespace: string;
}> {
    private directoryFilterArray;
    run(container: any): void;
}
export declare class CustomModuleDetector extends AbstractFileDetector<{
    modules: any[];
    namespace: string;
}> {
    run(container: any): void;
}
//# sourceMappingURL=fileDetector.d.ts.map