export interface RouterInfo {
    /**
     * uuid
     */
    id: string;
    /**
     * router prefix from controller
     */
    prefix: string;
    /**
     * router alias name
     */
    routerName: string;
    /**
     * router path, without prefix
     */
    url: string | RegExp;
    /**
     * request method for http, like get/post/delete
     */
    requestMethod: string;
    /**
     * invoke function method
     */
    method: string;
    /**
     * router description
     */
    description: string;
    summary: string;
    /**
     * router handler function key，for IoC container load
     */
    handlerName: string;
    /**
     *  serverless func load key
     */
    funcHandlerName: string;
    /**
     * controller provideId
     */
    controllerId: string;
    /**
     * router middleware
     */
    middleware: any[];
    /**
     * controller middleware in this router
     */
    controllerMiddleware: any[];
    /**
     * request args metadata
     */
    requestMetadata: any[];
    /**
     * response data metadata
     */
    responseMetadata: any[];
    /**
     * serverless function name
     */
    functionName?: string;
    /**
     * serverless trigger name
     */
    functionTriggerName?: string;
    /**
     * serverless function trigger metadata
     */
    functionTriggerMetadata?: any;
    /**
     * serverless function metadata
     */
    functionMetadata?: any;
}
export interface RouterPriority {
    prefix: string;
    priority: number;
    middleware: any[];
    routerOptions: any;
    controllerId: string;
    /**
     * 路由控制器或者函数 module 本身
     */
    routerModule: any;
}
export interface RouterCollectorOptions {
    includeFunctionRouter?: boolean;
    globalPrefix?: string;
}
export declare class WebRouterCollector {
    protected readonly baseDir: string;
    private isReady;
    protected routes: Map<string, RouterInfo[]>;
    private routesPriority;
    protected options: RouterCollectorOptions;
    constructor(baseDir?: string, options?: RouterCollectorOptions);
    protected analyze(): Promise<void>;
    protected collectRoute(module: any, functionMeta?: boolean): void;
    protected collectFunctionRoute(module: any, functionMeta?: boolean): void;
    sortRouter(urlMatchList: RouterInfo[]): {
        _pureRouter: string;
        _level: number;
        _paramString: string;
        _category: number;
        _weight: number;
        /**
         * uuid
         */
        id: string;
        /**
         * router prefix from controller
         */
        prefix: string;
        /**
         * router alias name
         */
        routerName: string;
        /**
         * router path, without prefix
         */
        url: string | RegExp;
        /**
         * request method for http, like get/post/delete
         */
        requestMethod: string;
        /**
         * invoke function method
         */
        method: string;
        /**
         * router description
         */
        description: string;
        summary: string;
        /**
         * router handler function key，for IoC container load
         */
        handlerName: string;
        /**
         *  serverless func load key
         */
        funcHandlerName: string;
        /**
         * controller provideId
         */
        controllerId: string;
        /**
         * router middleware
         */
        middleware: any[];
        /**
         * controller middleware in this router
         */
        controllerMiddleware: any[];
        /**
         * request args metadata
         */
        requestMetadata: any[];
        /**
         * response data metadata
         */
        responseMetadata: any[];
        /**
         * serverless function name
         */
        functionName?: string;
        /**
         * serverless trigger name
         */
        functionTriggerName?: string;
        /**
         * serverless function trigger metadata
         */
        functionTriggerMetadata?: any;
        /**
         * serverless function metadata
         */
        functionMetadata?: any;
    }[];
    getRoutePriorityList(): Promise<RouterPriority[]>;
    getRouterTable(): Promise<Map<string, RouterInfo[]>>;
    getFlattenRouterTable(): Promise<RouterInfo[]>;
    private checkDuplicateAndPush;
}
//# sourceMappingURL=webRouterCollector.d.ts.map