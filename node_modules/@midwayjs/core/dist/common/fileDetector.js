"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomModuleDetector = exports.DirectoryFileDetector = exports.AbstractFileDetector = void 0;
const decorator_1 = require("@midwayjs/decorator");
const glob_1 = require("@midwayjs/glob");
class AbstractFileDetector {
    constructor(options) {
        this.options = options;
        this.extraDetectorOptions = {};
    }
    setExtraDetectorOptions(detectorOptions) {
        this.extraDetectorOptions = detectorOptions;
    }
}
exports.AbstractFileDetector = AbstractFileDetector;
const DEFAULT_PATTERN = ['**/**.ts', '**/**.tsx', '**/**.js'];
const DEFAULT_IGNORE_PATTERN = [
    '**/**.d.ts',
    '**/logs/**',
    '**/run/**',
    '**/public/**',
    '**/app/view/**',
    '**/app/views/**',
    '**/app/extend/**',
    '**/node_modules/**',
    '**/**.test.ts',
    '**/**.test.js',
    '**/__test__/**',
];
class DirectoryFileDetector extends AbstractFileDetector {
    constructor() {
        super(...arguments);
        this.directoryFilterArray = [];
    }
    run(container) {
        const loadDirs = []
            .concat(this.options.loadDir || [])
            .concat(this.extraDetectorOptions.loadDir || []);
        for (const dir of loadDirs) {
            const fileResults = (0, glob_1.run)(DEFAULT_PATTERN.concat(this.options.pattern || []).concat(this.extraDetectorOptions.pattern || []), {
                cwd: dir,
                ignore: DEFAULT_IGNORE_PATTERN.concat(this.options.ignore || []).concat(this.extraDetectorOptions.ignore || []),
            });
            for (const file of fileResults) {
                if (this.directoryFilterArray.length) {
                    for (const resolveFilter of this.directoryFilterArray) {
                        if (typeof resolveFilter.pattern === 'string') {
                            if (file.includes(resolveFilter.pattern)) {
                                const exports = resolveFilter.ignoreRequire
                                    ? undefined
                                    : require(file);
                                resolveFilter.filter(exports, file, this);
                                continue;
                            }
                        }
                        else if (decorator_1.Types.isRegExp(resolveFilter.pattern)) {
                            if (resolveFilter.pattern.test(file)) {
                                const exports = resolveFilter.ignoreRequire
                                    ? undefined
                                    : require(file);
                                resolveFilter.filter(exports, file, this);
                                continue;
                            }
                        }
                        const exports = require(file);
                        // add module to set
                        container.bindClass(exports, {
                            namespace: this.options.namespace,
                            srcPath: file,
                            createFrom: 'file',
                        });
                    }
                }
                else {
                    const exports = require(file);
                    // add module to set
                    container.bindClass(exports, {
                        namespace: this.options.namespace,
                        srcPath: file,
                        createFrom: 'file',
                    });
                }
            }
        }
    }
}
exports.DirectoryFileDetector = DirectoryFileDetector;
class CustomModuleDetector extends AbstractFileDetector {
    run(container) {
        for (const module of this.options.modules) {
            container.bindClass(module, {
                namespace: this.options.namespace,
                createFrom: 'module',
            });
        }
    }
}
exports.CustomModuleDetector = CustomModuleDetector;
//# sourceMappingURL=fileDetector.js.map