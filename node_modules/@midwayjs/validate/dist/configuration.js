"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateConfiguration = void 0;
const decorator_1 = require("@midwayjs/decorator");
const core_1 = require("@midwayjs/core");
const constants_1 = require("./constants");
const util = require("util");
const DefaultConfig = require("./config/config.default");
const service_1 = require("./service");
const i18n = require("@midwayjs/i18n");
const debug = util.debuglog('midway:debug');
let ValidateConfiguration = class ValidateConfiguration {
    async onReady() {
        debug(`[midway:validate] Register @validate "${constants_1.VALIDATE_KEY}" handler"`);
        this.decoratorService.registerMethodHandler(constants_1.VALIDATE_KEY, options => {
            var _a;
            // get param types from method
            const paramTypes = (0, decorator_1.getMethodParamTypes)(options.target, options.propertyName);
            const validateOptions = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.options;
            // add aspect method
            return {
                before: (joinPoint) => {
                    for (let i = 0; i < paramTypes.length; i++) {
                        if (!validateOptions.locale) {
                            const maybeCtx = joinPoint.target[core_1.REQUEST_OBJ_CTX_KEY];
                            if (maybeCtx && maybeCtx.getAttr) {
                                validateOptions.locale = maybeCtx.getAttr(i18n.I18N_ATTR_KEY);
                            }
                        }
                        const item = paramTypes[i];
                        const result = this.validateService.validate(item, joinPoint.args[i], validateOptions);
                        if (result && result.value) {
                            joinPoint.args[i] = result.value;
                        }
                    }
                },
            };
        });
    }
};
__decorate([
    (0, decorator_1.Inject)(),
    __metadata("design:type", core_1.MidwayDecoratorService)
], ValidateConfiguration.prototype, "decoratorService", void 0);
__decorate([
    (0, decorator_1.Inject)(),
    __metadata("design:type", service_1.ValidateService)
], ValidateConfiguration.prototype, "validateService", void 0);
ValidateConfiguration = __decorate([
    (0, decorator_1.Configuration)({
        namespace: 'validate',
        imports: [i18n],
        importConfigs: [
            {
                default: DefaultConfig,
            },
        ],
    })
], ValidateConfiguration);
exports.ValidateConfiguration = ValidateConfiguration;
//# sourceMappingURL=configuration.js.map