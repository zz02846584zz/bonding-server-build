"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuleType = exports.Rule = void 0;
const joi = require("joi");
exports.RuleType = joi;
const decorator_1 = require("@midwayjs/decorator");
const constants_1 = require("../constants");
function Rule(rule, options = { required: true }) {
    return function (...args) {
        if (args[1]) {
            // 函数装饰器
            const [target, propertyKey] = args;
            if (!joi.isSchema(rule)) {
                rule = joi
                    .object((0, decorator_1.getClassMetadata)(constants_1.RULES_KEY, rule))
                    .meta({ id: rule.name });
                if ((0, decorator_1.getPropertyType)(target, propertyKey).name === 'Array') {
                    rule = joi.array().items(rule);
                    if (options.min) {
                        rule = rule.min(options.min);
                    }
                    if (options.max) {
                        rule = rule.max(options.max);
                    }
                }
                if (options.required) {
                    rule = rule.required();
                }
            }
            (0, decorator_1.attachClassMetadata)(constants_1.RULES_KEY, rule, target, propertyKey);
        }
        else {
            //类的装饰器
            const rules = (0, decorator_1.getClassMetadata)(constants_1.RULES_KEY, rule);
            if (rules) {
                let currentRule = (0, decorator_1.getClassMetadata)(constants_1.RULES_KEY, args[0]);
                currentRule = currentRule !== null && currentRule !== void 0 ? currentRule : {};
                Object.keys(rules).map(item => {
                    if (!currentRule[item]) {
                        currentRule[item] = rules[item];
                    }
                });
                (0, decorator_1.saveClassMetadata)(constants_1.RULES_KEY, currentRule, args[0]);
            }
        }
    };
}
exports.Rule = Rule;
//# sourceMappingURL=rule.js.map