"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CompilerHost = void 0;
const typescript_1 = __importDefault(require("typescript"));
const path_1 = __importDefault(require("path"));
class CompilerHost {
    constructor(projectDir, config) {
        var _a, _b;
        this.projectDir = projectDir;
        this.config = config;
        this.derivedOutputDir = (_b = (_a = config.compilerOptions) === null || _a === void 0 ? void 0 : _a.outDir) !== null && _b !== void 0 ? _b : 'dist';
        this.parsedCommandLine = typescript_1.default.parseJsonConfigFileContent(config, typescript_1.default.sys, projectDir);
        /**
         * mock paths for bundlers
         */
        const buildDir = path_1.default.join(this.derivedOutputDir, '.mwcc-cache');
        const compilerOptions = {
            ...this.parsedCommandLine.options,
        };
        /**
         * 0. redirect output dir
         */
        compilerOptions.outDir = buildDir;
        this.compilerOptions = compilerOptions;
        /**
         * 1. compile TypeScript files
         */
        this.compilerHost = compilerOptions.incremental
            ? typescript_1.default.createIncrementalCompilerHost(compilerOptions)
            : typescript_1.default.createCompilerHost(compilerOptions, true);
    }
    getProjectDir() {
        return this.projectDir;
    }
    getMwccConfig() {
        return this.config;
    }
    getCompilerOptions() {
        return this.compilerOptions;
    }
    getProjectFiles() {
        return this.parsedCommandLine.fileNames;
    }
}
exports.CompilerHost = CompilerHost;
//# sourceMappingURL=compiler-host.js.map