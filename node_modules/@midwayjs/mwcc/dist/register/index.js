"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("./utils");
const util_1 = require("../util");
const compiler_host_1 = require("../compiler-host");
const program_1 = require("../program");
const config_1 = require("../config");
const fs_1 = require("fs");
const path_1 = require("path");
function register() {
    const old = require.extensions['.ts'] || require.extensions['.js'] || (() => { }); // eslint-disable-line
    const program = createProgram();
    const getCompiledCodeAndMap = fileName => {
        return program.emitFile(fileName);
    };
    //  eslint-disable-next-line
    require.extensions['.ts'] = (m, filename) => {
        if (utils_1.ignoreFile(filename)) {
            return old(m, filename);
        }
        const _compile = m._compile;
        m._compile = function (_, fileName) {
            const codeAndMap = getCompiledCodeAndMap(fileName);
            util_1.debug('codeAndMap', codeAndMap, fileName);
            return _compile.call(this, codeAndMap.code, fileName);
        };
        return old(m, filename);
    };
}
const createProgram = () => {
    const cwd = process.cwd();
    if (!fs_1.existsSync(path_1.resolve(cwd, 'tsconfig.json'))) {
        throw new Error(`tsconfig.json does not exist in '${cwd}'`);
    }
    util_1.debug('cwd', cwd);
    const { config } = config_1.resolveTsConfigFile(cwd, undefined, undefined, undefined, {
        compilerOptions: {
            sourceMap: true,
            inlineSourceMap: true,
            outDir: '.mwts-node',
            declaration: false,
        },
    });
    util_1.debug('config', config);
    const compilerHost = new compiler_host_1.CompilerHost(cwd, config);
    const program = new program_1.Program(compilerHost);
    return program;
};
register();
//# sourceMappingURL=index.js.map