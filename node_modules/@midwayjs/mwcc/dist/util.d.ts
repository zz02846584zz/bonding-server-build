import ts from 'typescript';
export declare type Mutable<T, P extends keyof T> = Omit<T, P> & {
    -readonly [key in P]: T[P];
};
export declare function extend(...args: any[]): any;
export declare function assert(condition: any, message?: string): asserts condition;
export declare function any<T>(arr: T[], match: (T: any) => boolean): boolean;
export declare function mixin<T, R>(lhs: T, rhs: R): T & R;
export declare function chainBundle(transformSourceFile: (x: ts.SourceFile) => ts.SourceFile): ts.Transformer<ts.SourceFile>;
export declare function USE(...condition: any[]): void;
export declare function getCodeOfNode(node: ts.Node): string;
export declare function safeJsonParse<T = any>(str: string): T | undefined;
export declare function tryCatch<T extends (...args: unknown[]) => unknown>(fn: T, ...args: Parameters<T>): {
    value?: ReturnType<T>;
    error?: unknown;
};
export declare const getSourceFileText: (nodeOrigin: ts.Node) => string;
export declare const getCodePositionInfo: (code: string, pos: number) => {
    ln: number;
    col: number;
    index: number;
};
export declare const toUnix: (p: string) => string;
export declare const debug: (msg: string, ...param: any[]) => void;
//# sourceMappingURL=util.d.ts.map