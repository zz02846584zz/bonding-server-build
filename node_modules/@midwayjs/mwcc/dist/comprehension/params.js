"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParamBySymbol = exports.getTypeByKind = exports.formatParams = void 0;
const typescript_1 = __importDefault(require("typescript"));
const formatParams = (args) => {
    return args.map((arg) => {
        if (arg.name) {
            return arg.name.escapedText;
        }
        if (arg.text) {
            return arg.text;
        }
        if (arg.symbol) {
            const symbol = exports.getParamBySymbol(arg.symbol);
            return symbol;
        }
        if (arg.elements) {
            return exports.formatParams(arg.elements);
        }
        return '';
    });
};
exports.formatParams = formatParams;
const getTypeByKind = kind => {
    switch (kind) {
        case typescript_1.default.SyntaxKind.NumericLiteral:
        case typescript_1.default.SyntaxKind.BigIntLiteral:
            return 'number';
        case typescript_1.default.SyntaxKind.StringLiteral:
            return 'string';
        case typescript_1.default.SyntaxKind.ArrayLiteralExpression:
            return 'array';
        case typescript_1.default.SyntaxKind.ObjectLiteralExpression:
            return 'object';
        case typescript_1.default.SyntaxKind.FalseKeyword:
            return 'false';
        case typescript_1.default.SyntaxKind.TrueKeyword:
            return 'true';
    }
    return 'unknown';
};
exports.getTypeByKind = getTypeByKind;
const getParamBySymbol = (symbol) => {
    var _a, _b, _c;
    let type;
    let text = (_a = symbol) === null || _a === void 0 ? void 0 : _a.text;
    const valueDeclaration = (symbol === null || symbol === void 0 ? void 0 : symbol.valueDeclaration) || symbol;
    if (valueDeclaration) {
        if (valueDeclaration.initializer) {
            text =
                valueDeclaration.initializer.text ||
                    ((_b = valueDeclaration.initializer.name) === null || _b === void 0 ? void 0 : _b.escapedText) ||
                    text ||
                    '';
            type = exports.getTypeByKind(valueDeclaration.initializer.kind);
        }
        else {
            type = exports.getTypeByKind(valueDeclaration.kind);
        }
    }
    switch (type) {
        case 'string':
            return text;
        case 'number':
            return +(text || 0);
        case 'array':
            return (((_c = valueDeclaration === null || valueDeclaration === void 0 ? void 0 : valueDeclaration.initializer) === null || _c === void 0 ? void 0 : _c.elements) || []).map(item => {
                return exports.getParamBySymbol(item);
            });
        case 'false':
            return false;
        case 'true':
            return true;
        case 'object': {
            const param = {};
            if (symbol.members) {
                symbol.members.forEach((value, key) => {
                    param[key] = exports.getParamBySymbol(value);
                });
            }
            return param;
        }
    }
    return text;
};
exports.getParamBySymbol = getParamBySymbol;
//# sourceMappingURL=params.js.map