"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClassInfo = exports.getExportType = exports.getNodeInfo = void 0;
const typescript_1 = __importDefault(require("typescript"));
const util_1 = require("../util");
const params_1 = require("./params");
const getNodeInfo = (node, classInfo) => {
    var _a, _b, _c, _d;
    if (typescript_1.default.isMethodDeclaration(node)) {
        const classBaseInfo = getBaseInfo(node.parent);
        const classDetail = classInfo[classBaseInfo.id];
        const name = ((_b = (_a = node) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.escapedText) || '';
        const memberInfo = (_d = (_c = classDetail === null || classDetail === void 0 ? void 0 : classDetail.nodeInfo) === null || _c === void 0 ? void 0 : _c.member) === null || _d === void 0 ? void 0 : _d[name];
        if (memberInfo) {
            return memberInfo;
        }
    }
    const baseInfo = getBaseInfo(node);
    if (typescript_1.default.isClassDeclaration(node)) {
        return classInfo[baseInfo.id] || baseInfo;
    }
    return baseInfo;
};
exports.getNodeInfo = getNodeInfo;
const getExportType = (node) => {
    var _a, _b;
    const isExport = (_a = node.modifiers) === null || _a === void 0 ? void 0 : _a.find((modifier) => {
        return modifier.kind === typescript_1.default.SyntaxKind.ExportKeyword;
    });
    const isDefault = isExport &&
        ((_b = node.modifiers) === null || _b === void 0 ? void 0 : _b.find((modifier) => {
            return modifier.kind === typescript_1.default.SyntaxKind.DefaultKeyword;
        }));
    return isExport ? (isDefault ? 'default' : 'export') : 'not';
};
exports.getExportType = getExportType;
const getNodePosition = (node) => {
    const code = util_1.getSourceFileText(node);
    return {
        range: {
            start: node.pos,
            end: node.end,
        },
        start: util_1.getCodePositionInfo(code, node.pos),
        end: util_1.getCodePositionInfo(code, node.end),
    };
};
const getBaseInfo = (node) => {
    var _a, _b;
    let { fileName } = node.getSourceFile();
    fileName = util_1.toUnix(fileName);
    let name = ((_b = (_a = node) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.escapedText) || '';
    const position = getNodePosition(node);
    const id = `${fileName.replace(/^.*?src\//, '')}#${name}#${position.range.start},${position.range.end}`;
    let type;
    if (typescript_1.default.isClassDeclaration(node)) {
        type = 'class';
    }
    else if (typescript_1.default.isMethodDeclaration(node)) {
        type = 'method';
    }
    else if (typescript_1.default.isConstructorDeclaration(node)) {
        type = 'constructor';
        name = 'constructor';
    }
    else if (typescript_1.default.isPropertyDeclaration(node)) {
        type = 'property';
    }
    return {
        type,
        id,
        fileName,
        name: name,
        position,
    };
};
const getClassInfo = (classItem) => {
    const baseInfo = getBaseInfo(classItem);
    const classInfo = {
        exportType: exports.getExportType(classItem),
        member: {},
    };
    if (classItem.heritageClauses && classItem.heritageClauses.length > 0) {
        const name = classItem.heritageClauses[0].types[0].expression.getText();
        classInfo.extends = {
            name,
        };
    }
    classItem.members.forEach(member => {
        var _a;
        const memberInfo = getBaseInfo(member);
        if (memberInfo.type === 'method') {
            const parameters = (_a = member) === null || _a === void 0 ? void 0 : _a.parameters;
            const params = parameters ? params_1.formatParams(parameters) : [];
            classInfo.member[memberInfo.name] = {
                ...memberInfo,
                params,
            };
            return;
        }
        classInfo.member[memberInfo.name] = memberInfo;
    });
    return {
        ...baseInfo,
        nodeInfo: classInfo,
    };
};
exports.getClassInfo = getClassInfo;
//# sourceMappingURL=node.js.map