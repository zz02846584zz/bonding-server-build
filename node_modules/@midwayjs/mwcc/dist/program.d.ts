import { CompilerHost } from './compiler-host';
import ts from 'typescript';
import { MwccConfig } from './type';
export interface MwccContext {
    config: MwccConfig;
    files: string[];
    outFiles: string[];
    projectDir: string;
    buildDir: string;
    derivedOutputDir: string;
    getTsOutputPath: (filename: string) => string | undefined;
}
export declare class Program {
    private host;
    constructor(host: CompilerHost, files?: string[]);
    getTypeChecker(): ts.TypeChecker;
    getSourceFiles(): readonly ts.SourceFile[];
    getSourceFile(filename: string): ts.SourceFile | undefined;
    emit(): Promise<{
        summary: {
            build: {
                inputFiles: string[];
                outputFiles: string[];
            };
            versions: {
                mwcc: any;
                typescript: any;
            };
            compilerOptions?: import("./type").CompilerOptionsJsonObject | undefined;
            include?: string[] | undefined;
            exclude?: string[] | undefined;
            features?: {
                tsc?: boolean | {
                    transformers: import("./type").TransformerPlugin[];
                } | undefined;
                bundler?: import("./type").BundlerOptions | undefined;
            } | undefined;
        };
        diagnostics: ts.Diagnostic[];
    }>;
    emitFile(fileName: string): {
        code: string;
        map: string;
        declaration: string;
    };
}
//# sourceMappingURL=program.d.ts.map