import * as ts from 'typescript';
import { MwccConfig } from './type';
export declare function compileWithOptions(projectDir: string, outDir: string, hintConfig?: MwccConfig): Promise<{
    summary: {
        build: {
            inputFiles: string[];
            outputFiles: string[];
        };
        versions: {
            mwcc: any;
            typescript: any;
        };
        compilerOptions?: import("./type").CompilerOptionsJsonObject | undefined;
        include?: string[] | undefined;
        exclude?: string[] | undefined;
        features?: {
            tsc?: boolean | {
                transformers: import("./type").TransformerPlugin[];
            } | undefined;
            bundler?: import("./type").BundlerOptions | undefined;
        } | undefined;
    };
    diagnostics: ts.Diagnostic[];
}>;
export declare function compileInProject(projectDir: string, outDir: string, hintConfig?: MwccConfig, overrideConfig?: MwccConfig): Promise<{
    summary: {
        build: {
            inputFiles: string[];
            outputFiles: string[];
        };
        versions: {
            mwcc: any;
            typescript: any;
        };
        compilerOptions?: import("./type").CompilerOptionsJsonObject | undefined;
        include?: string[] | undefined;
        exclude?: string[] | undefined;
        features?: {
            tsc?: boolean | {
                transformers: import("./type").TransformerPlugin[];
            } | undefined;
            bundler?: import("./type").BundlerOptions | undefined;
        } | undefined;
    };
    diagnostics: ts.Diagnostic[];
}>;
export declare const findAndParseTsConfig: (projectDir: string, outDir?: string | undefined, configName?: string | undefined, hintConfig?: MwccConfig | undefined, overrideConfig?: MwccConfig | undefined) => ts.ParsedCommandLine;
//# sourceMappingURL=orchestra.d.ts.map