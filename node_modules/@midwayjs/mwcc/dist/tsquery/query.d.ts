import ts from 'typescript';
/**
 * Given a `node` and its ancestors, determine if `node` is matched
 * by `selector`.
 * @param {?external:AST} node
 * @param {?SelectorAST} selector
 * @param {external:AST[]} [ancestry=[]]
 * @throws {Error} Unknowns (operator, class name, selector type, or
 * selector value type)
 * @returns {boolean}
 */
export declare function matches(node: ts.Node, selector: any, ancestry: ts.Node[]): any;
/**
 * From a JS AST and a selector AST, collect all JS AST nodes that
 * match the selector.
 * @param {?SelectorAST} selector
 * @returns {external:AST[]}
 */
export declare function match(ast: ts.Node, selector: any): ts.Node[];
/**
 * From a JS AST and a selector AST, collect all JS AST nodes that
 * match the selector.
 * @param {?SelectorAST} selector
 * @returns {external:AST[]}
 */
export declare function visitMatch(ast: ts.Node, selector: any, onMatch: (node: ts.Node) => ts.Node, ctx: ts.TransformationContext): any;
/**
 * Parse a selector string and return its AST.
 * @param {string} selector
 * @returns {SelectorAST}
 */
export declare function parse(selector: string): any;
/**
 * Query the code AST using the selector string.
 * @param {external:AST} ast
 * @param {string} selector
 * @returns {external:AST[]}
 */
export declare function query(ast: ts.Node, selector: string): ts.Node[];
export default query;
//# sourceMappingURL=query.d.ts.map