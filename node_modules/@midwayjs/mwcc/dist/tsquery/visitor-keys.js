"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VisitorKeys = void 0;
const typescript_1 = __importDefault(require("typescript"));
const KnownVisitorKeys = (type) => {
    switch (type) {
        case typescript_1.default.SyntaxKind.QualifiedName:
            return ['left', 'right'];
        case typescript_1.default.SyntaxKind.TypeParameter:
            return ['name', 'constraint', 'default', 'expression'];
        case typescript_1.default.SyntaxKind.ShorthandPropertyAssignment:
            return [
                'decorators',
                'modifiers',
                'name',
                'questionToken',
                'exclamationToken',
                'equalsToken',
                'objectAssignmentInitializer',
            ];
        case typescript_1.default.SyntaxKind.SpreadAssignment:
            return ['expression'];
        case typescript_1.default.SyntaxKind.Parameter:
            return [
                'decorators',
                'modifiers',
                'dotDotDotToken',
                'name',
                'questionToken',
                'type',
                'initializer',
            ];
        case typescript_1.default.SyntaxKind.PropertyDeclaration:
            return [
                'decorators',
                'modifiers',
                'name',
                'questionToken',
                'exclamationToken',
                'type',
                'initializer',
            ];
        case typescript_1.default.SyntaxKind.PropertySignature:
            return [
                'decorators',
                'modifiers',
                'name',
                'questionToken',
                'type',
                'initializer',
            ];
        case typescript_1.default.SyntaxKind.PropertyAssignment:
            return [
                'decorators',
                'modifiers',
                'name',
                'questionToken',
                'initializer',
            ];
        case typescript_1.default.SyntaxKind.VariableDeclaration:
            return [
                'decorators',
                'modifiers',
                'name',
                'exclamationToken',
                'type',
                'initializer',
            ];
        case typescript_1.default.SyntaxKind.BindingElement:
            return [
                'decorators',
                'modifiers',
                'dotDotDotToken',
                'propertyName',
                'name',
                'initializer',
            ];
        case typescript_1.default.SyntaxKind.FunctionType:
        case typescript_1.default.SyntaxKind.ConstructorType:
        case typescript_1.default.SyntaxKind.CallSignature:
        case typescript_1.default.SyntaxKind.ConstructSignature:
        case typescript_1.default.SyntaxKind.IndexSignature:
            return [
                'decorators',
                'modifiers',
                'typeParameters',
                'parameters',
                'type',
            ];
        case typescript_1.default.SyntaxKind.MethodDeclaration:
        case typescript_1.default.SyntaxKind.MethodSignature:
        case typescript_1.default.SyntaxKind.Constructor:
        case typescript_1.default.SyntaxKind.GetAccessor:
        case typescript_1.default.SyntaxKind.SetAccessor:
        case typescript_1.default.SyntaxKind.FunctionExpression:
        case typescript_1.default.SyntaxKind.FunctionDeclaration:
        case typescript_1.default.SyntaxKind.ArrowFunction:
            return [
                'decorators',
                'modifiers',
                'asteriskToken',
                'name',
                'questionToken',
                'exclamationToken',
                'typeParameters',
                'parameters',
                'type',
                'equalsGreaterThanToken',
                'body',
            ];
        case typescript_1.default.SyntaxKind.TypeReference:
            return ['typeName', 'typeArguments'];
        case typescript_1.default.SyntaxKind.TypePredicate:
            return ['assertsModifier', 'parameterName', 'type'];
        case typescript_1.default.SyntaxKind.TypeQuery:
            return ['exprName'];
        case typescript_1.default.SyntaxKind.TypeLiteral:
            return ['members'];
        case typescript_1.default.SyntaxKind.ArrayType:
            return ['elementType'];
        case typescript_1.default.SyntaxKind.TupleType:
            return ['elementTypes'];
        case typescript_1.default.SyntaxKind.UnionType:
        case typescript_1.default.SyntaxKind.IntersectionType:
            return ['types'];
        case typescript_1.default.SyntaxKind.ConditionalType:
            return ['checkType', 'extendsType', 'trueType', 'falseType'];
        case typescript_1.default.SyntaxKind.InferType:
            return ['typeParameter'];
        case typescript_1.default.SyntaxKind.ImportType:
            return ['argument', 'qualifier', 'typeArguments'];
        case typescript_1.default.SyntaxKind.ParenthesizedType:
        case typescript_1.default.SyntaxKind.TypeOperator:
            return ['type'];
        case typescript_1.default.SyntaxKind.IndexedAccessType:
            return ['objectType', 'indexType'];
        case typescript_1.default.SyntaxKind.MappedType:
            return ['readonlyToken', 'typeParameter', 'questionToken', 'type'];
        case typescript_1.default.SyntaxKind.LiteralType:
            return ['literal'];
        case typescript_1.default.SyntaxKind.ObjectBindingPattern:
        case typescript_1.default.SyntaxKind.ArrayBindingPattern:
            return ['elements'];
        case typescript_1.default.SyntaxKind.ArrayLiteralExpression:
            return ['elements'];
        case typescript_1.default.SyntaxKind.ObjectLiteralExpression:
            return ['properties'];
        case typescript_1.default.SyntaxKind.PropertyAccessExpression:
            return ['expression', 'questionDotToken', 'name'];
        case typescript_1.default.SyntaxKind.ElementAccessExpression:
            return ['expression', 'questionDotToken', 'argumentExpression'];
        case typescript_1.default.SyntaxKind.CallExpression:
        case typescript_1.default.SyntaxKind.NewExpression:
            return ['expression', 'questionDotToken', 'typeArguments', 'arguments'];
        case typescript_1.default.SyntaxKind.TaggedTemplateExpression:
            return ['tag', 'questionDotToken', 'typeArguments', 'template'];
        case typescript_1.default.SyntaxKind.TypeAssertionExpression:
            return ['type', 'expression'];
        case typescript_1.default.SyntaxKind.ParenthesizedExpression:
            return ['expression'];
        case typescript_1.default.SyntaxKind.DeleteExpression:
            return ['expression'];
        case typescript_1.default.SyntaxKind.TypeOfExpression:
            return ['expression'];
        case typescript_1.default.SyntaxKind.VoidExpression:
            return ['expression'];
        case typescript_1.default.SyntaxKind.PrefixUnaryExpression:
            return ['operand'];
        case typescript_1.default.SyntaxKind.YieldExpression:
            return ['asteriskToken', 'expression'];
        case typescript_1.default.SyntaxKind.AwaitExpression:
            return ['expression'];
        case typescript_1.default.SyntaxKind.PostfixUnaryExpression:
            return ['operand'];
        case typescript_1.default.SyntaxKind.BinaryExpression:
            return ['left', 'operatorToken', 'right'];
        case typescript_1.default.SyntaxKind.AsExpression:
            return ['expression', 'type'];
        case typescript_1.default.SyntaxKind.NonNullExpression:
            return ['expression'];
        case typescript_1.default.SyntaxKind.MetaProperty:
            return ['name'];
        case typescript_1.default.SyntaxKind.ConditionalExpression:
            return [
                'condition',
                'questionToken',
                'whenTrue',
                'colonToken',
                'whenFalse',
            ];
        case typescript_1.default.SyntaxKind.SpreadElement:
            return ['expression'];
        case typescript_1.default.SyntaxKind.Block:
        case typescript_1.default.SyntaxKind.ModuleBlock:
            return ['statements'];
        case typescript_1.default.SyntaxKind.SourceFile:
            return ['statements', 'endOfFileToken'];
        case typescript_1.default.SyntaxKind.VariableStatement:
            return ['decorators', 'modifiers', 'declarationList'];
        case typescript_1.default.SyntaxKind.VariableDeclarationList:
            return ['declarations'];
        case typescript_1.default.SyntaxKind.ExpressionStatement:
            return ['expression'];
        case typescript_1.default.SyntaxKind.IfStatement:
            return ['expression', 'thenStatement', 'elseStatement'];
        case typescript_1.default.SyntaxKind.DoStatement:
            return ['statement', 'expression'];
        case typescript_1.default.SyntaxKind.WhileStatement:
            return ['expression', 'statement'];
        case typescript_1.default.SyntaxKind.ForStatement:
            return ['initializer', 'condition', 'incrementor', 'statement'];
        case typescript_1.default.SyntaxKind.ForInStatement:
            return ['initializer', 'expression', 'statement'];
        case typescript_1.default.SyntaxKind.ForOfStatement:
            return ['awaitModifier', 'initializer', 'expression', 'statement'];
        case typescript_1.default.SyntaxKind.ContinueStatement:
        case typescript_1.default.SyntaxKind.BreakStatement:
            return ['label'];
        case typescript_1.default.SyntaxKind.ReturnStatement:
            return ['expression'];
        case typescript_1.default.SyntaxKind.WithStatement:
            return ['expression', 'statement'];
        case typescript_1.default.SyntaxKind.SwitchStatement:
            return ['expression', 'caseBlock'];
        case typescript_1.default.SyntaxKind.CaseBlock:
            return ['clauses'];
        case typescript_1.default.SyntaxKind.CaseClause:
            return ['expression', 'statements'];
        case typescript_1.default.SyntaxKind.DefaultClause:
            return ['statements'];
        case typescript_1.default.SyntaxKind.LabeledStatement:
            return ['label', 'statement'];
        case typescript_1.default.SyntaxKind.ThrowStatement:
            return ['expression'];
        case typescript_1.default.SyntaxKind.TryStatement:
            return ['tryBlock', 'catchClause', 'finallyBlock'];
        case typescript_1.default.SyntaxKind.CatchClause:
            return ['variableDeclaration', 'block'];
        case typescript_1.default.SyntaxKind.Decorator:
            return ['expression'];
        case typescript_1.default.SyntaxKind.ClassDeclaration:
        case typescript_1.default.SyntaxKind.ClassExpression:
            return [
                'decorators',
                'modifiers',
                'name',
                'typeParameters',
                'heritageClauses',
                'members',
            ];
        case typescript_1.default.SyntaxKind.InterfaceDeclaration:
            return [
                'decorators',
                'modifiers',
                'name',
                'typeParameters',
                'heritageClauses',
                'members',
            ];
        case typescript_1.default.SyntaxKind.TypeAliasDeclaration:
            return ['decorators', 'modifiers', 'name', 'typeParameters', 'type'];
        case typescript_1.default.SyntaxKind.EnumDeclaration:
            return ['decorators', 'modifiers', 'name', 'members'];
        case typescript_1.default.SyntaxKind.EnumMember:
            return ['name', 'initializer'];
        case typescript_1.default.SyntaxKind.ModuleDeclaration:
            return ['decorators', 'modifiers', 'name', 'body'];
        case typescript_1.default.SyntaxKind.ImportEqualsDeclaration:
            return ['decorators', 'modifiers', 'name', 'moduleReference'];
        case typescript_1.default.SyntaxKind.ImportDeclaration:
            return ['decorators', 'modifiers', 'importClause', 'moduleSpecifier'];
        case typescript_1.default.SyntaxKind.ImportClause:
            return ['name', 'namedBindings'];
        case typescript_1.default.SyntaxKind.NamespaceExportDeclaration:
            return ['name'];
        case typescript_1.default.SyntaxKind.NamespaceImport:
            return ['name'];
        case typescript_1.default.SyntaxKind.NamedImports:
        case typescript_1.default.SyntaxKind.NamedExports:
            return ['elements'];
        case typescript_1.default.SyntaxKind.ExportDeclaration:
            return ['decorators', 'modifiers', 'exportClause', 'moduleSpecifier'];
        case typescript_1.default.SyntaxKind.ImportSpecifier:
        case typescript_1.default.SyntaxKind.ExportSpecifier:
            return ['propertyName', 'name'];
        case typescript_1.default.SyntaxKind.ExportAssignment:
            return ['decorators', 'modifiers', 'expression'];
        case typescript_1.default.SyntaxKind.TemplateExpression:
            return ['templateSpans'];
        case typescript_1.default.SyntaxKind.TemplateSpan:
            return ['literal'];
        case typescript_1.default.SyntaxKind.ComputedPropertyName:
            return ['expression'];
        case typescript_1.default.SyntaxKind.HeritageClause:
            return ['types'];
        case typescript_1.default.SyntaxKind.ExpressionWithTypeArguments:
            return ['expression', 'typeArguments'];
        case typescript_1.default.SyntaxKind.ExternalModuleReference:
            return ['expression'];
        case typescript_1.default.SyntaxKind.MissingDeclaration:
            return ['decorators'];
        case typescript_1.default.SyntaxKind.CommaListExpression:
            return ['elements'];
        case typescript_1.default.SyntaxKind.JsxElement:
            return ['openingElement', 'children', 'closingElement'];
        case typescript_1.default.SyntaxKind.JsxFragment:
            return ['openingFragment', 'children', 'closingFragment'];
        case typescript_1.default.SyntaxKind.JsxSelfClosingElement:
        case typescript_1.default.SyntaxKind.JsxOpeningElement:
            return ['tagName', 'typeArguments', 'attributes'];
        case typescript_1.default.SyntaxKind.JsxAttributes:
            return ['properties'];
        case typescript_1.default.SyntaxKind.JsxAttribute:
            return ['name', 'initializer'];
        case typescript_1.default.SyntaxKind.JsxSpreadAttribute:
            return ['expression'];
        case typescript_1.default.SyntaxKind.JsxExpression:
            return ['dotDotDotToken', 'expression'];
        case typescript_1.default.SyntaxKind.JsxClosingElement:
            return ['tagName'];
        case typescript_1.default.SyntaxKind.OptionalType:
        case typescript_1.default.SyntaxKind.RestType:
        case typescript_1.default.SyntaxKind.JSDocTypeExpression:
        case typescript_1.default.SyntaxKind.JSDocNonNullableType:
        case typescript_1.default.SyntaxKind.JSDocNullableType:
        case typescript_1.default.SyntaxKind.JSDocOptionalType:
        case typescript_1.default.SyntaxKind.JSDocVariadicType:
            return ['type'];
        case typescript_1.default.SyntaxKind.JSDocFunctionType:
            return ['parameters', 'type'];
        case typescript_1.default.SyntaxKind.JSDocComment:
            return ['tags'];
        case typescript_1.default.SyntaxKind.JSDocParameterTag:
        case typescript_1.default.SyntaxKind.JSDocPropertyTag:
            return ['tagName', 'name', 'typeExpression'];
        case typescript_1.default.SyntaxKind.JSDocAuthorTag:
            return ['tagName'];
        case typescript_1.default.SyntaxKind.JSDocAugmentsTag:
            return ['tagName', 'class'];
        case typescript_1.default.SyntaxKind.JSDocTemplateTag:
            return ['tagName', 'constraint', 'typeParameters'];
        case typescript_1.default.SyntaxKind.JSDocTypedefTag:
            return ['tagName', 'typeExpression', 'fullName'];
        case typescript_1.default.SyntaxKind.JSDocCallbackTag:
            return ['tagName', 'fullName', 'typeExpression'];
        case typescript_1.default.SyntaxKind.JSDocReturnTag:
        case typescript_1.default.SyntaxKind.JSDocTypeTag:
        case typescript_1.default.SyntaxKind.JSDocThisTag:
        case typescript_1.default.SyntaxKind.JSDocEnumTag:
            return ['tagName', 'typeExpression'];
        case typescript_1.default.SyntaxKind.JSDocSignature:
            return ['typeParameters', 'parameters', 'type'];
        case typescript_1.default.SyntaxKind.JSDocTypeLiteral:
            return ['jsDocPropertyTags'];
        case typescript_1.default.SyntaxKind.JSDocTag:
        case typescript_1.default.SyntaxKind.JSDocClassTag:
            return ['tagName'];
        case typescript_1.default.SyntaxKind.PartiallyEmittedExpression:
            return ['expression'];
    }
    return [];
};
exports.VisitorKeys = new Proxy({}, {
    get: (target, key) => {
        var _a;
        return (_a = KnownVisitorKeys(key)) !== null && _a !== void 0 ? _a : [];
    },
});
//# sourceMappingURL=visitor-keys.js.map