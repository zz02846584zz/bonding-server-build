"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findAndParseTsConfig = exports.compileInProject = exports.compileWithOptions = void 0;
const path = __importStar(require("path"));
const ts = __importStar(require("typescript"));
const config_1 = require("./config");
const compiler_host_1 = require("./compiler-host");
const program_1 = require("./program");
async function compile(projectDir, config) {
    const host = new compiler_host_1.CompilerHost(projectDir, config);
    const program = new program_1.Program(host);
    return await program.emit();
}
async function compileWithOptions(projectDir, outDir, hintConfig) {
    projectDir = path.resolve(projectDir);
    const defaultConfig = config_1.getDefaultConfig(projectDir, outDir);
    const config = config_1.mergeConfigs(defaultConfig, hintConfig, projectDir);
    return compile(projectDir, config);
}
exports.compileWithOptions = compileWithOptions;
async function compileInProject(projectDir, outDir, hintConfig, overrideConfig) {
    const { config } = config_1.resolveTsConfigFile(projectDir, outDir, undefined, hintConfig, overrideConfig);
    return compile(projectDir, config);
}
exports.compileInProject = compileInProject;
const findAndParseTsConfig = function findAndParseTsConfig(projectDir, outDir, configName, hintConfig, overrideConfig) {
    const { config, tsconfigPath } = config_1.resolveTsConfigFile(projectDir, outDir, configName, hintConfig, overrideConfig);
    const cli = ts.parseJsonConfigFileContent(config, ts.sys, projectDir, undefined, tsconfigPath);
    return cli;
};
exports.findAndParseTsConfig = findAndParseTsConfig;
//# sourceMappingURL=orchestra.js.map