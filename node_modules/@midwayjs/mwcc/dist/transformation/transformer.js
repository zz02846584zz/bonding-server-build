"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = __importDefault(require("typescript"));
const transformation_context_1 = require("./transformation-context");
const util_1 = require("../util");
const query_1 = require("../tsquery/query");
function createTransformer(host, checker, config) {
    const transformers = loadPlugin(config);
    return ctx => {
        const transformCtx = transformation_context_1.createTransformationContext(ctx, checker);
        const pipeline = transformers.map(transformer => {
            const it = transformer.transform(transformCtx);
            if (typeof it === 'object') {
                return util_1.chainBundle(conditionalTransform(it, transformCtx));
            }
            return util_1.chainBundle(it);
        });
        return chainTransformers(pipeline);
    };
    function conditionalTransform(map, ctx) {
        return (node) => {
            var _a;
            let result = Object.keys(map).reduce((sourceFile, pattern) => {
                return query_1.visitMatch(sourceFile, query_1.parse(pattern), map[pattern], ctx);
            }, node);
            const additionalHelperStmts = ctx.swapAdditionalHelperStatements();
            if (additionalHelperStmts.length) {
                result = typescript_1.default.updateSourceFileNode(result, [...additionalHelperStmts, ...result.statements], result.isDeclarationFile, result.referencedFiles, result.typeReferenceDirectives, result.hasNoDefaultLib, result.libReferenceDirectives);
            }
            // FIXME: Updated SourceFile missing symbol property may crash typescript functions afterwards.
            result.symbol = (_a = result.symbol) !== null && _a !== void 0 ? _a : {};
            return result;
        };
    }
}
exports.default = createTransformer;
function loadTransformer(name) {
    const mod = require(name);
    if (mod.default) {
        return mod.default;
    }
    return mod;
}
function loadPlugin(config) {
    var _a;
    const tsc = (_a = config.features) === null || _a === void 0 ? void 0 : _a.tsc;
    if (tsc === false) {
        return [];
    }
    const transformers = [
        {
            name: require.resolve('../feature/tsconfig-paths'),
        },
    ];
    if (typeof tsc === 'object' && Array.isArray(tsc.transformers)) {
        transformers.push(...tsc.transformers);
    }
    return transformers.map(({ name, module }) => {
        if (module) {
            return module;
        }
        return loadTransformer(name);
    });
}
function chainTransformers(transformers) {
    return node => {
        return transformers.reduce((node, curr) => {
            return curr(node);
        }, node);
    };
}
//# sourceMappingURL=transformer.js.map