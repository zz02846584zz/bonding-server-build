"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createTransformationContext = void 0;
const util_1 = require("../util");
const typescript_1 = __importDefault(require("typescript"));
const module_1 = require("../comprehension/module");
function createTransformationContext(ctx, checker) {
    const additionalHelperStatements = [];
    const newCtx = {
        /** @internal */
        additionalHelperStatements,
        swapAdditionalHelperStatements,
        /** @public */
        prependHelperStatements,
        getImportDeclarations,
        getModuleSpecifierValue,
        getSourceFileName,
        resolveImportedNames,
        resolveDeclarations,
    };
    return util_1.mixin(ctx, newCtx);
    function prependHelperStatements(...stmts) {
        newCtx.additionalHelperStatements = newCtx.additionalHelperStatements.concat(stmts);
    }
    function swapAdditionalHelperStatements() {
        const stmts = newCtx.additionalHelperStatements;
        newCtx.additionalHelperStatements = [];
        return stmts;
    }
    function getImportDeclarations(file) {
        // TODO:
        util_1.USE(file);
        return [];
    }
    function getModuleSpecifierValue(decl) {
        const { moduleSpecifier } = decl;
        if (!typescript_1.default.isStringLiteral(moduleSpecifier)) {
            return undefined;
        }
        return moduleSpecifier.text;
    }
    function getSourceFileName(node) {
        const sourceFile = node.getSourceFile();
        return sourceFile.fileName;
    }
    function resolveImportedNames(node) {
        if (node.flags & typescript_1.default.NodeFlags.Synthesized) {
            return [];
        }
        const symbol = checker.getSymbolAtLocation(node);
        if (symbol == null) {
            return undefined;
        }
        return module_1.resolveImportedName(symbol);
    }
    function resolveDeclarations(node) {
        if (node.flags & typescript_1.default.NodeFlags.Synthesized) {
            return [];
        }
        const symbol = checker.getSymbolAtLocation(node);
        if (symbol == null) {
            return [];
        }
        return symbol.declarations;
    }
}
exports.createTransformationContext = createTransformationContext;
//# sourceMappingURL=transformation-context.js.map