"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TnvmAgent = void 0;
const childProcess = __importStar(require("child_process"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const util_1 = require("../util");
const defaultTnvmDir = path.resolve(os.homedir(), '.tnvm');
const tnvmScriptPath = path.resolve(__dirname, '../../script/tnvm.sh');
class TnvmAgent {
    // eslint-disable-next-line no-useless-constructor
    constructor(tnvmDir = defaultTnvmDir) {
        this.tnvmDir = tnvmDir;
        this.enabled = false;
        if (os.platform() !== 'win32') {
            this.shell = this.findBash();
        }
        this.enabled = this.shell != null;
    }
    async listVersions(type) {
        this.assertPlatform();
        try {
            const stdout = await this.exec('_tnvm_ls', [type], 'list versions failed');
            return stdout.split('\n');
        }
        catch (_a) {
            return [];
        }
    }
    async isVersionInstalled(version) {
        this.assertPlatform();
        try {
            await this.exec('_tnvm_ensure_version_installed', [version], '');
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    async getExecPathOfVersion(version) {
        this.assertPlatform();
        let nodeDir;
        try {
            nodeDir = await this.exec('_tnvm_version_path', [version], `get exec path of ${version} failed`);
        }
        catch (_a) {
            /** ignore */
        }
        if (!nodeDir) {
            return undefined;
        }
        return path.join(nodeDir, 'bin/node');
    }
    async install(version) {
        this.assertPlatform();
        return this.exec('tnvm', ['install', version], `install ${version} failed`);
    }
    async uninstall(version) {
        this.assertPlatform();
        return this.exec('tnvm', ['uninstall', version], `uninstall ${version} failed`);
    }
    async exec(command, args, errDescription) {
        this.assertPlatform();
        return new Promise((resolve, reject) => {
            childProcess.exec(`source ${tnvmScriptPath}; ${command} ${args
                .map(it => JSON.stringify(it))
                .join(' ')}`, {
                env: { ...process.env, TNVM_DIR: this.tnvmDir },
                shell: this.shell,
            }, (error, stdout, stderr) => {
                if (error) {
                    const err = new Error(errDescription);
                    err.stderr = stderr;
                    err.reason = error;
                    return reject(err);
                }
                return resolve(stdout.trim());
            });
        });
    }
    findBash() {
        let { value: path } = util_1.tryCatch(() => childProcess.execSync('type -p bash', { encoding: 'utf8' }));
        if (path == null) {
            ({ value: path } = util_1.tryCatch(() => childProcess.execSync('which bash', { encoding: 'utf8' })));
        }
        return path === null || path === void 0 ? void 0 : path.trim();
    }
    assertPlatform() {
        if (!this.enabled) {
            throw new Error('tnvm is not available on this type of operating system.');
        }
    }
}
exports.TnvmAgent = TnvmAgent;
//# sourceMappingURL=tnvm.js.map